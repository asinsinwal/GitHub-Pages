---
- hosts: nodes
  gather_facts: no

  vars: 
    packages_prereq_phpV:
      - build-essential 
      - dkms 
      - unzip 
      - wget

    packages_phpV:
      - apache2 
      - php 
      - php-mysql 
      - libapache2-mod-php 
      - php-soap 
      - php-xml

    services:
      - vboxweb-service
      - vboxdrv
      - apache2

  tasks:
    
    # Ensuring python3-apt package
    - name: Ensure python3-apt is installed
      command: >
          apt-get install python3-apt -y -q
          creates=/usr/share/doc/python3-apt
      become: yes
      register: ensure1
    
    # Ensuring aptitude package
    - debug: msg="{{ ensure1.stdout }}"

    - name: Ensure aptitude is installed
      command: >
          apt install aptitude -y -q
      become: yes
      register: ensure2

    - debug: msg="{{ ensure2.stdout }}"
  
    # Gather facts
    - name: Gathering facts
      setup:

    #Prerequisites to install VirtualBox
    - name: Run the equivalent of "apt-get update" as a separate step
      apt:
        update_cache: yes
      
    
    - name: Update all packages to the latest version
      apt: 
        upgrade: dist
    
    - name: Install all prerequisite packages
      apt: 
        pkg={{ item }} 
        state=present 
        update_cache=yes
      with_items: "{{ packages_prereq_phpV }}"
      become: yes

    # Check status for prerequisite packages
    - debug:
        msg: "{{ item }}"
      with_items: "{{ packages_prereq_phpV }}"
      
    # Reboot server
    - name: Reboot server
      shell: sleep 2 && shutdown -r now 'Ansible Reboot required' removes=/var/run/reboot-required
      become: true
      async: 1
      poll: 0
      ignore_errors: true

    # Wait for the server
    - name: wait for server to come back
      local_action: wait_for
      args:
        host: "{{ inventory_hostname }}"
        port: 22
        state: started
        delay: 20
        timeout: 300

    # Add specified repository into sources list
    - name: Add virtualbox into sources.list
      apt_repository:
        repo: deb http://download.virtualbox.org/virtualbox/debian xenial contrib
        state: present
      

    
    #Add an Apt signing key, uses whichever key is at the URL
    - apt_key:
        url: "https://www.virtualbox.org/download/oracle_vbox_2016.asc"
        state: present
      become: yes

    
    # For older versions of VirtualBox
    - apt_key:
        url: "https://www.virtualbox.org/download/oracle_vbox.asc"
        state: present 
      become: yes

    - name: Run the equivalent of "apt-get update" as a separate step
      apt:
        update_cache: yes

    # Install Virtualbox
    - name: Install Virtualbox-5.0
      apt: pkg=virtualbox-5.0 state=present update_cache=yes 
      become: yes


    # Adding user - 'ubuntu' to vboxusers
    - name: Adding existing user 'ubuntu' to group vboxusers
      user: name={{ ansible_user }}
        groups=vboxusers
        append=yes
    

    - name: Install all phpVirtualBox packages
      apt: 
        pkg={{ item }} 
        state=present 
        update_cache=yes
      with_items: "{{ packages_phpV }}"
      become: yes

    # Check status for phpVirtualBox packages
    - debug:
        msg: "{{ item }}"
      with_items: "{{ packages_phpV }}"


    # Download and Unzip phpVirtualBox
    - name: Download and Unzip phpVirtualbox
      unarchive:
        src: "https://sourceforge.net/projects/phpvirtualbox/files/phpvirtualbox-5.0-5.zip"
        dest: /var/www/html/
        remote_src: True
    

    # touch the directory, but add/remove some permissions
    - file:
        path: /var/www/html/phpvirtualbox-5.0-5/
        mode: "u+rwx,g+rwx,o+rwx"

    # touch the directory, but add/remove some permissions
    - file:
        path: /etc/shadow
        owner: root
        group: shadow
        mode: 0644

    # Example from Ansible Playbooks
    - copy:
        src: /var/www/html/phpvirtualbox-5.0-5/config.php-example
        dest: /var/www/html/phpvirtualbox-5.0-5/config.php
        remote_src: true  
    

    # Replace username and password in config.php file
    - replace:
        path: /var/www/html/phpvirtualbox-5.0-5/config.php
        regexp: '(.*?var.*?username.*)'
        replace: "var $username = \'{{ ansible_user }}\';"
        backup: yes
    
    - replace:
        path: /var/www/html/phpvirtualbox-5.0-5/config.php
        regexp: '(.*?var.*?password.*)'
        replace: "var $password = \'bdb5e2b09bbcf05dc6ddfe67\';"
        backup: yes

    # Create VBOXWEB file 
    - name: ensure virtualbox file exists
      copy:
        content: "VBOXWEB_USER={{ ansible_user }}"
        dest: /etc/default/virtualbox
        force: no
        group: root
        owner: root
        mode: 0777

    # Move the directory 
    - name: Stat phpvirtualbox-5.0-5
      stat: path=/var/www/html/phpvirtualbox-5.0-5
      register: phpVirtual

    - name: Move phpvirtualbox-5.0-5 to phpvirtualbox
      command: mv /var/www/html/phpvirtualbox-5.0-5 /var/www/html/phpvirtualbox
      when: phpVirtual.stat.exists

    # Reboot server
    - name: Reboot server
      shell: sleep 2 && shutdown -r now 'Ansible Reboot required' removes=/var/run/reboot-required
      become: true
      async: 1
      poll: 0
      ignore_errors: true

    # Wait for the server
    - name: wait for server to come back
      local_action: wait_for
      args:
        host: "{{ inventory_hostname }}"
        port: 22
        state: started
        delay: 20
        timeout: 300

    # Restart the vbox server
    - name: Restart all the services
      service:
        name: "{{ item }}"
        state: restarted
      with_items: "{{ services }}"
      become: yes


    # Install Vagrant
    - name: Install Vagrant
      apt: pkg=vagrant state=present update_cache=yes 
      become: yes

    # Check if vagrant folder exists
    - name: Stat vagrant
      stat: path=/home/ubuntu/vagrant
      register: vagrantFolder
  
    # Initialize Vagrant Trusty32
    - name: Command to create VagrantFile to folder temp
      command: "{{ item }}"
      when: vagrantFolder.stat.exists == False 
      become_user: ubuntu
      with_items:
        - mkdir vagrant 
      
    
    # Check if vagrantFile exists
    - name: Stat vagrantFile
      stat: path=/home/ubuntu/vagrant/Vagrantfile
      register: vagrantFile1


    # Command to run vagrant init
    - name: Go to the folder and execute command
      command: "{{ item }} chdir=/home/ubuntu/vagrant/"
      when: vagrantFile1.stat.exists == False
      become_user: ubuntu
      with_items:
        - vagrant init ubuntu/trusty32
      

    # Copy Vagrantfile to ubuntu 16.04 server
    - name: Move Vagrantfile to remote
      template: 
        src: /home/vagrant_data/HW1/Vagrantfile
        dest: /home/ubuntu/vagrant/Vagrantfile

    Run vm (Ubuntu using vagrant)
    - name: Command for vagrant up
      command: "{{ item }} chdir=/home/ubuntu/vagrant/"
      become_user: ubuntu
      async: 4000
      poll: 10
      with_items:
        - vagrant up

#### Extra Code Tries

    # # wget method 1
    # lineinfile:
    #   path: /etc/apt/sources.list
    #   line: 'deb http://download.virtualbox.org/virtualbox/debian xenial contrib'
    #   state: present
    # become: yes

  # # Change ubuntu's password
    # - name: Change root password
    #   user: 
    #     name: "ubuntu" 
    #     update_password: always 
    #     password: "PASSWORD"
    #   become: yes


    # # Regex to change vagrant file
    # - replace:
    #     path: /home/ubuntu/vagrant/Vagrantfile
    #     regexp: '(.*?vm.provider(.|\n)*.+?(?=# View))'
    #     replace: '\nconfig.vm.provider "virtualbox" do |vb| \n  vb.customize ["modifyvm", :id, "--cpus", "1"] \n  vb.customize ["modifyvm", :id, "--nictype1", "virtio"]\nend \n# VM booting time out increment\nconfig.vm.boot_timeout = 700'
    #     backup: yes